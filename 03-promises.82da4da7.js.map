{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SACaC,SAASC,cAAc,SAE/BC,iBAAiB,UAAU,SAAAC,GAC9BA,EAAEC,iBAQJ,SAA8BC,EAAOC,EAAMC,GACzCC,YAAW,YAKb,SAA0BF,EAAMC,GAC9B,IAAIE,EAAY,EACZC,EAAaJ,EAEXK,EAAUC,aAAY,WACtBH,IAAcF,GAChBM,cAAcF,GAmBpB,SAAuBG,EAAUT,GAC/B,IAAMU,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACvBL,EACFI,EAAQ,CAAEL,WAAUT,UAEpBe,EAAO,CAAEN,WAAUT,aAfvBgB,CAPsBZ,EAAWC,GAQ9BY,MAAK,SAAAC,G,IAAGC,EAAQD,EAART,SAAUT,EAAKkB,EAALlB,MACjBP,EAAA2B,OAAOC,QAAQ,uBAAwCC,OAAfH,EAAS,QAAYG,OAANtB,EAAM,UAE9DuB,OAAM,SAAAL,G,IAAGC,EAAQD,EAART,SAAUT,EAAKkB,EAALlB,MAClBP,EAAA2B,OAAOI,QAAQ,sBAAqCF,OAAfH,EAAS,QAAYG,OAANtB,EAAM,UAX5DI,GAAa,EACbC,GAAcJ,IACbA,GAhBDwB,CAAiBxB,EAAMC,KACtBF,GANH0B,CAJcC,SAAS7B,EAAE8B,cAAcC,SAAgB,MAAEC,OAC5CH,SAAS7B,EAAE8B,cAAcC,SAAe,KAAEC,OACxCH,SAAS7B,EAAE8B,cAAcC,SAAiB,OAAEC,W","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n  const delay = parseInt(e.currentTarget.elements['delay'].value);\n  const step = parseInt(e.currentTarget.elements['step'].value);\n  const amount = parseInt(e.currentTarget.elements['amount'].value);\n\n  startGeneratePromise(delay, step, amount);\n});\n\nfunction startGeneratePromise(delay, step, amount) {\n  setTimeout(() => {\n    promiseRepeating(step, amount);\n  }, delay);\n}\n\nfunction promiseRepeating(step, amount) {\n  let stepsLeft = 1;\n  let sumOfDelay = step;\n\n  const timerID = setInterval(() => {\n    if (stepsLeft === amount) {\n      clearInterval(timerID);\n    }\n\n    outputPromiseResult(stepsLeft, sumOfDelay);\n    stepsLeft += 1;\n    sumOfDelay += step;\n  }, step);\n}\n\nfunction outputPromiseResult(position, daley) {\n  createPromise(position, daley)\n    .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n"],"names":["$h6c0i","parcelRequire","document","querySelector","addEventListener","e","preventDefault","delay","step","amount","setTimeout","stepsLeft","sumOfDelay","timerID","setInterval","clearInterval","position","shouldResolve","Math","random","Promise","resolve","reject","$ce04d3a99e08e73b$var$createPromise","then","param","_$position","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$promiseRepeating","$ce04d3a99e08e73b$var$startGeneratePromise","parseInt","currentTarget","elements","value"],"version":3,"file":"03-promises.82da4da7.js.map"}