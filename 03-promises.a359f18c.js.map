{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SACaC,SAASC,cAAc,SAE/BC,iBAAiB,UAAUC,IAC9BA,EAAEC,kBAQJ,SAA8BC,EAAOC,EAAMC,GACzCC,YAAW,MAKb,SAA0BF,EAAMC,GAC9B,IAAIE,EAAY,EACZC,EAAaJ,EAEjB,MAAMK,EAAUC,aAAY,KACtBH,IAAcF,GAChBM,cAAcF,GAmBpB,SAAuBG,EAAUT,GAC/B,MAAMU,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACvBL,EACFI,EAAQ,C,SAAEL,E,MAAUT,IAEpBe,EAAO,C,SAAEN,E,MAAUT,OAfvBgB,CAPsBZ,EAAWC,GAQ9BY,MAAK,EAACR,SAAEA,EAAQT,MAAEA,MACjBP,EAAAyB,OAAOC,QAAQ,uBAAqBV,QAAiBT,UAEtDoB,OAAM,EAACX,SAAEA,EAAQT,MAAEA,MAClBP,EAAAyB,OAAOG,QAAQ,sBAAoBZ,QAAeT,UAXpDI,GAAa,EACbC,GAAcJ,IACbA,GAhBDqB,CAAiBrB,EAAMC,KACtBF,GANHuB,CAJcC,SAAS1B,EAAE2B,cAAcC,SAAgB,MAAEC,OAC5CH,SAAS1B,EAAE2B,cAAcC,SAAe,KAAEC,OACxCH,SAAS1B,EAAE2B,cAAcC,SAAiB,OAAEC","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n  const delay = parseInt(e.currentTarget.elements['delay'].value);\n  const step = parseInt(e.currentTarget.elements['step'].value);\n  const amount = parseInt(e.currentTarget.elements['amount'].value);\n\n  startGeneratePromise(delay, step, amount);\n});\n\nfunction startGeneratePromise(delay, step, amount) {\n  setTimeout(() => {\n    promiseRepeating(step, amount);\n  }, delay);\n}\n\nfunction promiseRepeating(step, amount) {\n  let stepsLeft = 1;\n  let sumOfDelay = step;\n\n  const timerID = setInterval(() => {\n    if (stepsLeft === amount) {\n      clearInterval(timerID);\n    }\n\n    outputPromiseResult(stepsLeft, sumOfDelay);\n    stepsLeft += 1;\n    sumOfDelay += step;\n  }, step);\n}\n\nfunction outputPromiseResult(position, daley) {\n  createPromise(position, daley)\n    .then(({ position, delay }) => {\n      Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n"],"names":["$iQIUW","parcelRequire","document","querySelector","addEventListener","e","preventDefault","delay","step","amount","setTimeout","stepsLeft","sumOfDelay","timerID","setInterval","clearInterval","position","shouldResolve","Math","random","Promise","resolve","reject","$47d4ff9957288465$var$createPromise","then","Notify","success","catch","failure","$47d4ff9957288465$var$promiseRepeating","$47d4ff9957288465$var$startGeneratePromise","parseInt","currentTarget","elements","value"],"version":3,"file":"03-promises.a359f18c.js.map"}